// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Sqlite.sol";

contract SqliteTest is Test {
    Sqlite public sqlite;
    function setUp() public {
       sqlite = new Sqlite();
    }

    function testOpcodes() public {
        // Sqlite.Instruction memory ins;
        // ins.opcode = 77;
        // ins.p1 = 1;
        // ins.p2 = 2;
        // ins.p3 = 3;
        // ins.p4 = 4;
        // ins.p5 = 5;

        /*
        CREATE TABLE "im" (
          "id"	INTEGER,
          "time"	INTEGER,
          "is_del"	INTEGER,
          "price"	REAL,
          "first"	TEXT NOT NULL COLLATE NOCASE,
          "last"	TEXT NOT NULL COLLATE NOCASE,
          PRIMARY KEY("id" AUTOINCREMENT)
        )

        explain insert into im(is_del, time) values (0, 123), (1, 555)

        NOTE: some zero values are actually NULL. beware.
        */

        // SHIELD YOUR EYES
        sqlite.execute(hex"000000000000000000000000000000000000000000000000000000000000003eae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005343414efb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

        /*
        sqlite.execute(abi.encode(
          uint256(Opcode.Init),          0, 1, 0, 0/*NULL* /, 0,
          uint256(Opcode.InitCoroutine), 12, 9, 2, 0, 
          uint256(Opcode.Integer),       0, 13, 0, 0, 
          uint256(Opcode.Integer),       123, 14, 0, 0, 
          uint256(Opcode.Yield),         12, 0, 0, 0, 
          uint256(Opcode.Integer),       1, 13, 0, 0, 
          uint256(Opcode.Integer),       555, 14, 0, 0, 
          uint256(Opcode.Yield),         12, 0, 0, 0, 
          uint256(Opcode.EndCoroutine),  12, 0, 0, 0, 
          uint256(Opcode.OpenWrite),     0, 5, 0, 6, 0, 
          uint256(Opcode.Yield),         12, 21, 0, 0, 
          uint256(Opcode.SoftNull),      6, 0, 0, 0, 
          uint256(Opcode.SCopy),         14, 7, 0, 0, 
          uint256(Opcode.SCopy),         13, 8, 0, 0, 
          uint256(Opcode.NewRowid),      0, 5, 2, 0, 
          uint256(Opcode.MemMax),        2, 5, 0, 0, 
          uint256(Opcode.HaltIfNull),    1299, 2, 10, hex"696d2e6669727374"/*im.first* /, 1, 
          uint256(Opcode.HaltIfNull),    1299, 2, 11, hex"696d2e6c617374"/*im.last* /, 1, 
          uint256(Opcode.MakeRecord),    6, 6, 17, hex"444444454242"/*DDDEBB* /, 0, 
          uint256(Opcode.Insert),        0, 17, 5, hex"696d"/*im* /, 57, 
          uint256(Opcode.Goto),          0, 10, 0, 0,
          uint256(Opcode.Le),            4, 28, 2, 0, 
          uint256(Opcode.OpenWrite),     0, 3, 0, 2, 0, 
          uint256(Opcode.NotNull),       3, 25, 0, 0, 
          uint256(Opcode.NewRowid),      0, 3, 0, 0, 
          uint256(Opcode.MakeRecord),    1, 2, 18, 0, 
          uint256(Opcode.Insert),        0, 18, 3, 8, 
          uint256(Opcode.Close),         0, 0, 0, 0, 
          uint256(Opcode.Halt),          0, 0, 0, 0, 
          uint256(Opcode.Transaction),   0, 0, 6, 0, 1,
          uint256(Opcode.OpenRead),      0, 3, 0, 2, 0, 
          uint256(Opcode.String8),       0, 1, 0, hex"696d"/*im* /, 0, 
          uint256(Opcode.Null),          0, 2, 4, 0, 
          uint256(Opcode.Rewind),        0, 42, 0, 0, 
          uint256(Opcode.Column),        0, 0, 2, 0, 
          uint256(Opcode.Ne),            1, 41, 2, 16, 
          uint256(Opcode.Rowid),         0, 3, 0, 0, 
          uint256(Opcode.Column),        0, 1, 2, 0, 
          uint256(Opcode.AddImm),        2, 0, 0, 0, 
          uint256(Opcode.Copy),          2, 4, 0, 0, 
          uint256(Opcode.Goto),          0, 43, 0, 0, 
          uint256(Opcode.Next),          0, 34, 0, 0, 
          uint256(Opcode.Integer),       0, 2, 0, 0, 
          uint256(Opcode.Close),         0, 0, 0, 0, 
          uint256(Opcode.Null),          0, 9, 0, 0, 
          uint256(Opcode.Null),          0, 10, 0, 0, 
          uint256(Opcode.Null),          0, 11, 0, 0, 
          uint256(Opcode.Goto),          0, 1, 0, 0
        ));
        */
    }
}
